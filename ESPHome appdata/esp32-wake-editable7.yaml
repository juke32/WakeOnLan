esphome:
  name: esp32_wake-on-lan
  friendly_name: ESP32 Wake On LAN Editable
  includes:
    - components/wake_on_lan_config/wake_on_lan_config.h
  on_boot:
    priority: -100.0
    then:
      - lambda: |-
          id(current_page) = id(default_screen);
      - delay: 3min
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          if (id(mac1_enabled) && id(mac1) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac1));
          if (id(mac2_enabled) && id(mac2) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac2));
          if (id(mac3_enabled) && id(mac3) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac3));
          if (id(mac4_enabled) && id(mac4) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac4));
          if (id(mac5_enabled) && id(mac5) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac5));
          if (id(mac6_enabled) && id(mac6) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac6));

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:

api:
  encryption:
    key: "kAE53RgT5oFHTEsyoKwoK22dvkVu/eBwo24sFb2HdR0="

ota:
  platform: esphome
  password: "6f27d02c984012ae6cf73e2890ec4372"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 15min
  ap:
    ssid: "WakeOnLan-APmode"
    password: "password"

captive_portal:

web_server:
  port: 80
  local: false

i2c:
  sda: 5
  scl: 6
  scan: true

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: ip_address
    ssid:
      name: ESP SSID
      id: ssid
    bssid:
      name: ESP BSSID
      id: bssid
    mac_address:
      name: ESP MAC
      id: mac
  - platform: template
    name: ESP AP IP
    id: ap_ip
    lambda: |-
      if (id(ip_address).has_state() && id(ip_address).state != "") {
        return {};
      } else {
        return std::string("192.168.4.1");
      }
    update_interval: 5s

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    update_interval: 60s

globals:
  - id: display_on
    type: bool
    restore_value: no
    initial_value: 'true'  # true = display on, false = display off
  - id: default_screen
    type: int
    restore_value: yes
    initial_value: '0'  # 0=page 1, 5=page 6 (blank)
  - id: current_page
    type: int
    restore_value: no
    initial_value: '0'

  - id: wake_interval
    type: int
    restore_value: yes
    initial_value: '80'
  - id: last_wake
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: mac1
    type: std::string
    restore_value: yes
    initial_value: '"11:00:0A:BB:28:FC"'
  - id: mac2
    type: std::string
    restore_value: yes
    initial_value: '"00:22:00:00:00:00"'
  - id: mac3
    type: std::string
    restore_value: yes
    initial_value: '"00:00:33:00:00:00"'
  - id: mac4
    type: std::string
    restore_value: yes
    initial_value: '"00:00:00:44:00:00"'
  - id: mac5
    type: std::string
    restore_value: yes
    initial_value: '"00:00:00:00:55:00"'
  - id: mac6
    type: std::string
    restore_value: yes
    initial_value: '"00:00:00:00:00:66"'
  - id: mac1_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: mac2_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: mac3_enabled
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mac4_enabled
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mac5_enabled
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: mac6_enabled
    type: bool
    restore_value: yes
    initial_value: 'false'

script:
  - id: wake_all_devices
    mode: queued
    then:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          if (id(mac1_enabled) && id(mac1) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac1));
          if (id(mac2_enabled) && id(mac2) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac2));
          if (id(mac3_enabled) && id(mac3) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac3));
          if (id(mac4_enabled) && id(mac4) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac4));
          if (id(mac5_enabled) && id(mac5) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac5));
          if (id(mac6_enabled) && id(mac6) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac6));

interval:
  - interval: 60s
    then:
      - lambda: |-
          unsigned long now = millis();
          if (now - id(last_wake) >= id(wake_interval) * 60 * 1000) {
            id(last_wake) = now;
            using namespace esphome::wake_on_lan_config;
            static WakeOnLanConfig wol;
            if (id(mac1_enabled) && id(mac1) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac1));
            if (id(mac2_enabled) && id(mac2) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac2));
            if (id(mac3_enabled) && id(mac3) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac3));
            if (id(mac4_enabled) && id(mac4) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac4));
            if (id(mac5_enabled) && id(mac5) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac5));
            if (id(mac6_enabled) && id(mac6) != "00:00:00:00:00:00") wol.send_magic_packet(id(mac6));
          }

button:
  - platform: template
    name: "Wake MAC 1"
    id: wake_mac1
    on_press:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          wol.send_magic_packet(id(mac1));
  - platform: template
    name: "Wake MAC 2"
    id: wake_mac2
    on_press:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          wol.send_magic_packet(id(mac2));
  - platform: template
    name: "Wake MAC 3"
    id: wake_mac3
    on_press:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          wol.send_magic_packet(id(mac3));
  - platform: template
    name: "Wake MAC 4"
    id: wake_mac4
    on_press:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          wol.send_magic_packet(id(mac4));
  - platform: template
    name: "Wake MAC 5"
    id: wake_mac5
    on_press:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          wol.send_magic_packet(id(mac5));
  - platform: template
    name: "Wake MAC 6"
    id: wake_mac6
    on_press:
      - lambda: |-
          using namespace esphome::wake_on_lan_config;
          static WakeOnLanConfig wol;
          wol.send_magic_packet(id(mac6));

switch:

  - platform: template
    name: "MAC 1 Enabled"
    id: mac1_enabled_switch
    lambda: |-
      return id(mac1_enabled);
    turn_on_action:
      - lambda: |-
          id(mac1_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(mac1_enabled) = false;
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: "MAC 2 Enabled"
    id: mac2_enabled_switch
    lambda: |-
      return id(mac2_enabled);
    turn_on_action:
      - lambda: |-
          id(mac2_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(mac2_enabled) = false;
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: "MAC 3 Enabled"
    id: mac3_enabled_switch
    lambda: |-
      return id(mac3_enabled);
    turn_on_action:
      - lambda: |-
          id(mac3_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(mac3_enabled) = false;
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: "MAC 4 Enabled"
    id: mac4_enabled_switch
    lambda: |-
      return id(mac4_enabled);
    turn_on_action:
      - lambda: |-
          id(mac4_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(mac4_enabled) = false;
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: "MAC 5 Enabled"
    id: mac5_enabled_switch
    lambda: |-
      return id(mac5_enabled);
    turn_on_action:
      - lambda: |-
          id(mac5_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(mac5_enabled) = false;
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: "MAC 6 Enabled"
    id: mac6_enabled_switch
    lambda: |-
      return id(mac6_enabled);
    turn_on_action:
      - lambda: |-
          id(mac6_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(mac6_enabled) = false;
    restore_mode: RESTORE_DEFAULT_ON



text:

  - platform: template
    name: "About / Info"
    id: about_info
    mode: text
    initial_value: "github.com/juke32/WakeOnLan"
    restore_value: false
    optimistic: true

  - platform: template
    name: "Wake Every 1-4608 min."
    id: wake_interval_text
    mode: text
    initial_value: "80"
    restore_value: true
    set_action:
      - lambda: |-
          int val = atoi(x.c_str());
          if (val > 0 && val <= 4608) {
            id(wake_interval) = val;
          }

  - platform: template
    name: "Default Screen (0-6, 0=off)"
    id: default_screen_text
    mode: text
    initial_value: "1"
    restore_value: true
    set_action:
      - lambda: |-
          int val = atoi(x.c_str());
          if (val >= 1 && val <= 6) {
            id(default_screen) = val - 1;  // store as 0-based index
          }


  - platform: template
    name: "MAC 1"
    id: mac1_text
    mode: text
    initial_value: "11:00:0A:BB:28:FC"
    restore_value: true
    set_action:
      - lambda: |-
          id(mac1) = x;
  - platform: template
    name: "MAC 2"
    id: mac2_text
    mode: text
    initial_value: "00:22:00:00:00:00"
    restore_value: true
    set_action:
      - lambda: |-
          id(mac2) = x;
  - platform: template
    name: "MAC 3"
    id: mac3_text
    mode: text
    initial_value: "00:00:33:00:00:00"
    restore_value: true
    set_action:
      - lambda: |-
          id(mac3) = x;
  - platform: template
    name: "MAC 4"
    id: mac4_text
    mode: text
    initial_value: "00:00:00:44:00:00"
    restore_value: true
    set_action:
      - lambda: |-
          id(mac4) = x;
  - platform: template
    name: "MAC 5"
    id: mac5_text
    mode: text
    initial_value: "00:00:00:00:55:00"
    restore_value: true
    set_action:
      - lambda: |-
          id(mac5) = x;
  - platform: template
    name: "MAC 6"
    id: mac6_text
    mode: text
    initial_value: "00:00:00:00:00:66"
    restore_value: true
    set_action:
      - lambda: |-
          id(mac6) = x;

binary_sensor:
  - platform: gpio
    pin:
      number: 9
      mode: INPUT_PULLUP
      inverted: true
    name: "Boot Button (GPIO9)"
    on_press:
      then:
        - lambda: |-
            id(current_page) = (id(current_page) + 1) % 6;

  - platform: template
    name: "Display On State"
    lambda: |-
      return id(display_on);

display:
  - platform: ssd1306_i2c
    model: "SSD1306 72x40"
    address: 0x3C
    lambda: |-
      if (id(current_page) == 5) return;  // page 6 = blank
      int page = id(current_page);

      if (page == 0) {
        // WiFi/AP info
        if (id(ip_address).has_state() && id(ip_address).state != "") {
          it.printf(0, 0, id(font1), "WiFi: %s", id(ssid).state.c_str());
          it.printf(0, 20, id(font1), "IP: %s", id(ip_address).state.c_str());
        } else {
          it.printf(0, 0, id(font1), "WakeOnLan-APmode");
          it.printf(0, 10, id(font1), "Pass: password");
          it.printf(0, 20, id(font1), "192.168.4.1");
        }
        it.printf(0, 30, id(font1), "%s", id(mac).state.c_str());

      } else if (page == 1) {
        // System info
        unsigned long uptime = (unsigned long)id(uptime_sensor).state;
        unsigned long next_wol = id(wake_interval)*60 - ((millis() - id(last_wake))/1000);
        if ((long)next_wol < 0) next_wol = 0;
        it.printf(0, 0, id(font1), "Uptime: %lus", uptime);
        it.printf(0, 10, id(font1), "Next WOL: %lus", next_wol);
        it.printf(0, 20, id(font1), "Interval: %dmin", id(wake_interval));
        it.printf(0, 30, id(font1), "Page: %d", id(current_page)+1);

      } else if (page == 2) {
        // MAC 1 & 2
        it.printf(0, 0, id(font1), "MAC1: %s", id(mac1_enabled) ? "enabled" : "disabled");
        it.printf(0, 10, id(font1), "%s", id(mac1).c_str());
        it.printf(0, 20, id(font1), "MAC2: %s", id(mac2_enabled) ? "enabled" : "disabled");
        it.printf(0, 30, id(font1), "%s", id(mac2).c_str());

      } else if (page == 3) {
        // MAC 3 & 4
        it.printf(0, 0, id(font1), "MAC3: %s", id(mac3_enabled) ? "enabled" : "disabled");
        it.printf(0, 10, id(font1), "%s", id(mac3).c_str());
        it.printf(0, 20, id(font1), "MAC4: %s", id(mac4_enabled) ? "enabled" : "disabled");
        it.printf(0, 30, id(font1), "%s", id(mac4).c_str());

      } else if (page == 4) {
        // MAC 5 & 6
        it.printf(0, 0, id(font1), "MAC5: %s", id(mac5_enabled) ? "enabled" : "disabled");
        it.printf(0, 10, id(font1), "%s", id(mac5).c_str());
        it.printf(0, 20, id(font1), "MAC6: %s", id(mac6_enabled) ? "enabled" : "disabled");
        it.printf(0, 30, id(font1), "%s", id(mac6).c_str());
      }

font:
  - file: "ttf/DejaVuSans.ttf"
    id: font1
    size: 8

time:
  - platform: sntp
    id: sntp_time
